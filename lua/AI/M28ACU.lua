---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 02/12/2022 08:29
---
local M28Utilities = import('/mods/M28AI/lua/AI/M28Utilities.lua')
local M28UnitInfo = import('/mods/M28AI/lua/AI/M28UnitInfo.lua')
local M28Economy = import('/mods/M28AI/lua/AI/M28Economy.lua')
local M28Map = import('/mods/M28AI/lua/AI/M28Map.lua')
local M28Orders = import('/mods/M28AI/lua/AI/M28Orders.lua')
local M28Profiler = import('/mods/M28AI/lua/AI/M28Profiler.lua')
local M28Engineer = import('/mods/M28AI/lua/AI/M28Engineer.lua')
local M28Team = import('/mods/M28AI/lua/AI/M28Team.lua')
local M28Conditions = import('/mods/M28AI/lua/AI/M28Conditions.lua')
local M28Land = import('/mods/M28AI/lua/AI/M28Land.lua')

--ACU specific variables against the ACU
refbDoingInitialBuildOrder = 'M28ACUInitialBO'
reftPreferredUpgrades = 'M28ACUPreferredUpgrades' --table of the enhancement IDs in the order that we want to get them (which is updated to remove any upgrades we already have as and when we get them)
refiUpgradeCount = 'M28ACUUpgradeCount' --Number of upgrades the ACU has

function ACUBuildUnit(aiBrain, oACU, iCategoryToBuild, iMaxAreaToSearchForAdjacencyAndUnderConstruction, iMaxAreaToSearchForBuildLocation, iOptionalAdjacencyCategory, iOptionalCategoryBuiltUnitCanBuild)
    local sFunctionRef = 'ACUBuildUnit'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    --Do we have a nearby unit of the type we want to build under construction?
    local tNearbyUnitsOfCategoryToBuild = aiBrain:GetUnitsAroundPoint(iCategoryToBuild, oACU:GetPosition(), iMaxAreaToSearchForAdjacencyAndUnderConstruction, 'Ally')
    local oNearestPartComplete

    if M28Utilities.IsTableEmpty(tNearbyUnitsOfCategoryToBuild) == false then
        local iClosestUnit = 10000
        local iCurDist
        for _, oUnit in tNearbyUnitsOfCategoryToBuild do
            if oUnit:GetFractionComplete() < 1 then
                iCurDist = M28Utilities.GetTravelDistanceBetweenPositions(oUnit:GetPosition(), oACU:GetPosition(), M28Map.refPathingTypeLand)
                if iCurDist < iClosestUnit then
                    oNearestPartComplete = oUnit
                    iClosestUnit = iCurDist
                end
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Is tNearbyUnitsOfCategoryToBuild empty='..tostring(tNearbyUnitsOfCategoryToBuild)..'; Is oNearestPartComplete valid='..tostring(M28UnitInfo.IsUnitValid(oNearestPartComplete))) end
    if oNearestPartComplete then
        if bDebugMessages == true then LOG(sFunctionRef..': Will assist part complete building='..oNearestPartComplete.UnitId..M28UnitInfo.GetUnitLifetimeCount(oNearestPartComplete)) end
        M28Orders.IssueTrackedGuard(oACU, oNearestPartComplete, false)
    else
        --No nearby under construction factory, so build one
        --GetBlueprintAndLocationToBuild(aiBrain, oEngineer, iCategoryToBuild, iMaxAreaToSearch, iCatToBuildBy,         tAlternativePositionToLookFrom, bLookForQueuedBuildings, oUnitToBuildBy, iOptionalCategoryForStructureToBuild, bBuildCheapestStructure)
        local sBlueprint, tBuildLocation = M28Engineer.GetBlueprintAndLocationToBuild(aiBrain, oACU, iCategoryToBuild, iMaxAreaToSearchForAdjacencyAndUnderConstruction, iOptionalAdjacencyCategory, nil,                           false,                      nil,         iOptionalCategoryBuiltUnitCanBuild, nil)
        if not(tBuildLocation) then sBlueprint, tBuildLocation = M28Engineer.GetBlueprintAndLocationToBuild(aiBrain, oACU, iCategoryToBuild, iMaxAreaToSearchForBuildLocation, nil, nil,                           false,                      nil,         iOptionalCategoryBuiltUnitCanBuild, nil) end
        if bDebugMessages == true then
            local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oACU:GetPosition(), true, oACU)
            LOG(sFunctionRef..': Blueprint to build='..(sBlueprint or 'nil')..'; tBuildLocation='..repru(tBuildLocation)..'; ACU plateau and land zone based on cur position='..iPlateau..'; iLandZone='..(iLandZone or 'nil')..'; iMaxAreaToSearchForBuildLocation='..(iMaxAreaToSearchForBuildLocation or 'nil')..'; was iOptionalAdjacencyCategory nil='..tostring(iOptionalAdjacencyCategory == nil))
        end
        if sBlueprint and tBuildLocation then
            --Move to the target and then build on it
            local tMoveTarget = M28Engineer.GetLocationToMoveForConstruction(oACU, tBuildLocation, sBlueprint)
            if tMoveTarget then
                --IssueTrackedMoveAndBuild(oUnit, tBuildLocation, sOrderBlueprint, tMoveTarget, iDistanceToReorderMoveTarget, bAddToExistingQueue)
                M28Orders.IssueTrackedMoveAndBuild(oACU, tBuildLocation, sBlueprint, tMoveTarget, 2, false)
            else
                M28Orders.IssueTrackedBuild(oACU, tBuildLocation, sBlueprint, false)
            end
        else
            M28Orders.UpdateRecordedOrders(oACU)
        end
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function ACUActionBuildFactory(aiBrain, oACU)
    local sFunctionRef = 'ACUActionBuildFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iMaxAreaToSearch = 35
    local iCategoryToBuild = M28UnitInfo.refCategoryLandFactory
    if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryFactory) >= 2 and iCategoryToBuild == M28UnitInfo.refCategoryLandFactory then
        iMaxAreaToSearch = 20
    end
    ACUBuildUnit(aiBrain, oACU, iCategoryToBuild, iMaxAreaToSearch, iMaxAreaToSearch * 2, M28UnitInfo.refCategoryMex, M28UnitInfo.refCategoryEngineer)

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function ACUActionAssistHydro(aiBrain, oACU)
    --If have hydro under construction then assist the hydro if it's within build range; if not under construciton or out of build range then move towards it
    local sFunctionRef = 'ACUActionAssistHydro'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    --Redundancy - make sure we have hydros in this LZ:
    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oACU:GetPosition(), true, oACU)
    if bDebugMessages == true then LOG(sFunctionRef..': Do we have hydro loations in iPlateau '..iPlateau..'; iLZ='..iLandZone..': Table empty='..tostring(M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations]))) end
    if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations]) == false then
        local tNearestHydro
        local iNearestHydro = 10000
        local iCurDist
        local iBuildRange = oACU:GetBlueprint().Economy.MaxBuildDistance
        local iMinRangeToAssist = iBuildRange + 10
        for iHydro, tHydro in M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations] do
            iCurDist = M28Utilities.GetDistanceBetweenPositions(tHydro, oACU:GetPosition())
            if iCurDist < iNearestHydro then iNearestHydro = iCurDist tNearestHydro = tHydro end
        end
        --If we are in range of a hydro then assist it (or wait until construction is started)
        if bDebugMessages == true then LOG(sFunctionRef..': Checking if have hydro near enough to consider mvoing to and assisting, iNearestHydro='..iNearestHydro..'; iMinRangeToAssist='..iMinRangeToAssist) end
        if iNearestHydro < iMinRangeToAssist then
            local tUnderConstructionHydro = aiBrain:GetUnitsAroundPoint(M28UnitInfo.refCategoryHydro, tNearestHydro, 5, 'Ally')
            local oUnderConstructionHydro
            if bDebugMessages == true then LOG(sFunctionRef..': Is table of hydros around nearest hydro point empty='..tostring(M28Utilities.IsTableEmpty(tUnderConstructionHydro))) end
            if M28Utilities.IsTableEmpty(tUnderConstructionHydro) == false then
                for iHydro, oHydro in tUnderConstructionHydro do
                    if oHydro:GetFractionComplete() < 1 then
                        oUnderConstructionHydro = oHydro
                        break
                    end
                end
            end
            if oUnderConstructionHydro then
                M28Orders.IssueTrackedRepair(oACU, oUnderConstructionHydro, false, 'RH')
            else
                oACU['M28BOHydroWait'] = ( oACU['M28BOHydroWait'] or 0) + 1
                if  oACU['M28BOHydroWait'] >= 20 then
                    ACUActionBuildPower(aiBrain, oACU)
                else
                    --Stay where we are as maybe we are waiting for an engi to start construction
                    M28Orders.IssueTrackedMove(oACU, oACU:GetPosition(), 3, false, 'W4C')
                end
            end
        else
            --Move to be near hydro
            local tLocationNearHydro = M28Engineer.GetLocationToMoveForConstruction(oACU, tNearestHydro, 'ueb1102', -0.5, false)
            if tLocationNearHydro then
                M28Orders.IssueTrackedMove(oACU, tLocationNearHydro, 0.5, false, 'M2NH')
            else
                M28Orders.IssueTrackedMove(oACU, tNearestHydro, 0.5, false, 'M2H')
            end
        end
    else
        M28Utilities.ErrorHandler('Trying to buidl hydro when none nearby')
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function ACUActionBuildPower(aiBrain, oACU)
    local sFunctionRef = 'ACUActionBuildPower'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iCategoryToBuild = M28UnitInfo.refCategoryPower
    local iMaxAreaToSearch = 16
    local iOptionalAdjacencyCategory
    if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirFactory) > 0 then iOptionalAdjacencyCategory = M28UnitInfo.refCategoryAirFactory
    elseif aiBrain[M28Economy.refiGrossEnergyBaseIncome] <= 11 then iOptionalAdjacencyCategory = M28UnitInfo.refCategoryLandFactory
    end
    if bDebugMessages == true then LOG(sFunctionRef..': About to tell ACU to build power; is optional adjacency category nil='..tostring(iOptionalAdjacencyCategory == nil)) end
    ACUBuildUnit(aiBrain, oACU, iCategoryToBuild, iMaxAreaToSearch, iMaxAreaToSearch * 3, iOptionalAdjacencyCategory, nil)

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function ACUActionBuildMex(aiBrain, oACU)
    local sFunctionRef = 'ACUActionBuildMex'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    local iMaxAreaToSearch = 16
    --Increase search range if still doing initial build order, as this suggests we have mexes in our initial land zone that we havent built on yet
    if oACU[refbDoingInitialBuildOrder] then
        if aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 12 then iMaxAreaToSearch = 50
        elseif aiBrain[M28Economy.refiGrossMassBaseIncome] < 6 then iMaxAreaToSearch = 30
        end
    end

    if bDebugMessages == true then LOG(sFunctionRef..': About to tell ACU to build a mex, iMaxAreaToSearch='..iMaxAreaToSearch) end
    ACUBuildUnit(aiBrain, oACU, M28UnitInfo.refCategoryMex, iMaxAreaToSearch, iMaxAreaToSearch * 2, nil, nil)

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetACUEarlyGameOrders(aiBrain, oACU)
    local sFunctionRef = 'GetACUEarlyGameOrders'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    --Are we already building something?
    if bDebugMessages == true then LOG(sFunctionRef..': ACU unit state='..M28UnitInfo.GetUnitState(oACU)) end
    if not(oACU:IsUnitState('Building')) then
        local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oACU:GetPosition(), true, oACU)


        --Do we want to build a mex, hydro or factory?
        if bDebugMessages == true then LOG(sFunctionRef..': Current land factories='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory)..'; Gross energy income='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; Gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]) end
        local iMinEnergyPerTickWanted = 14 --i.e. 6 T1 PGens given ACU gives 2 E
        local iCurLandFactories = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory)
        if iCurLandFactories == 0 then
            if bDebugMessages == true then LOG(sFunctionRef..': Want ACU to build land factory') end
            ACUActionBuildFactory(aiBrain, oACU)
        elseif aiBrain[M28Economy.refiGrossEnergyBaseIncome] <= iMinEnergyPerTickWanted then

            --Do we want to build a hydro (so get mexes first then hydro) or build pgen?

            if bDebugMessages == true then LOG(sFunctionRef..': Will adjust build order depending on if have hydro nearby. Is table of land zone hydros empty='..tostring(M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations]))) end
            if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations]) then
                --Per discord gameplay and training pinned build order for going land facs with no hydro:
                --ACU:      Landfac - 2 PG - 2 Mex - 1 PG - 2 Mex - 3 PG - Landfac - PG - Landfac
                if bDebugMessages == true then LOG(sFunctionRef..': No hydro locations so will build power or mex depending on income') end
                if aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 6 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Want to build initial PGens') end
                    ACUActionBuildPower(aiBrain, oACU)
                else
                    local iMexInLandZone = 0
                    if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) == false then iMexInLandZone = table.getn(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) end
                    if bDebugMessages == true then LOG(sFunctionRef..': Deciding on ACU action for where no hydro nearby, gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Gross energy income='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; iMexInLandZone='..iMexInLandZone..'; iMinEnergyPerTickWanted='..iMinEnergyPerTickWanted..'; iCurLandFactories='..iCurLandFactories) end
                    if aiBrain[M28Economy.refiGrossMassBaseIncome] < math.min(2, iMexInLandZone) * 0.2 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want at least 2 mexes') end
                        ACUActionBuildMex(aiBrain, oACU)

                    elseif aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 8 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want at least 4 PGens') end
                        ACUActionBuildPower(aiBrain, oACU)
                    elseif aiBrain[M28Economy.refiGrossMassBaseIncome] < math.min(4, iMexInLandZone) * 0.2 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want up to 4 mexes') end
                        ACUActionBuildMex(aiBrain, oACU)
                    elseif aiBrain[M28Economy.refiGrossEnergyBaseIncome] < iMinEnergyPerTickWanted then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want basic level of power') end
                        ACUActionBuildPower(aiBrain, oACU)
                    elseif iCurLandFactories < 2 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want 2 land factories') end
                        ACUActionBuildFactory(aiBrain, oACU)
                    elseif aiBrain[M28Economy.refiGrossMassBaseIncome] < iMexInLandZone * 0.2 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to build on every mex in land zone') end
                        ACUActionBuildMex(aiBrain, oACU)
                    else
                        --No more actions so abort initial BO
                        oACU[refbDoingInitialBuildOrder] = false
                    end
                end

                --Redundancy if failed to get orer from the above
                if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) and oACU[refbDoingInitialBuildOrder] then
                    --No hydro nearby - try building power; then try building mex; then cancel initial build order
                    ACUActionBuildMex(aiBrain, oACU)
                    if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) then
                        ACUActionBuildPower(aiBrain, oACU)
                        if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) then
                            oACU[refbDoingInitialBuildOrder] = false
                        end
                    end
                end
            else --Have a hydro so get more mexes initially
                --Max mex to build
                local iMexInLandZone = 0
                if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) == false then iMexInLandZone = table.getn(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) end
                if bDebugMessages == true then LOG(sFunctionRef..': Hydro is nearby, Gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; iMexInLandZone='..iMexInLandZone..'; Gross base energy income='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]) end
                if aiBrain[M28Economy.refiGrossMassBaseIncome] < math.min(4, iMexInLandZone) * 0.2 then
                    if bDebugMessages == true then LOG(sFunctionRef..': We ahve mexes in land zone and we havent built on all of them so will build a mex') end
                    ACUActionBuildMex(aiBrain, oACU)
                elseif aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 10 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will try to assist a hydro nearby') end
                    ACUActionAssistHydro(aiBrain, oACU)
                else
                    --Have base level of power suggesting already have hydro
                    if bDebugMessages == true then LOG(sFunctionRef..': Want more power to reach a base level') end
                    ACUActionBuildPower(aiBrain, oACU)
                end

                --Redundancy if fail to get order from above
                if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) and oACU[refbDoingInitialBuildOrder] then
                    --Is it just that we want to assist a hydro and engineers havent started one yet? If so then check if we have an engineer assigned to build one, and check the game time
                    if GetGameTimeSeconds() <= 180 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 10 and M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZHydroLocations]) == false then
                        ACUActionAssistHydro(aiBrain, oACU)
                        if bDebugMessages == true then LOG(sFunctionRef..': Assuming we are waiting for an engi to start on building a hydro, or we have no nearby mexes to our ACU') end
                    else
                        if bDebugMessages == true then LOG(sFunctionRef..': Failed to get order from above so will resort to backup logic') end
                        --No hydro nearby - try building power; then try building mex; then cancel initial build order
                        ACUActionBuildMex(aiBrain, oACU)
                        if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) then
                            ACUActionAssistHydro(aiBrain, oACU)
                            if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) then
                                ACUActionBuildPower(aiBrain, oACU)
                                if M28Utilities.IsTableEmpty(oACU[M28Orders.reftiLastOrders]) then
                                    oACU[refbDoingInitialBuildOrder] = false
                                end
                            end
                        end
                    end
                end
            end
        else
            --Have initial power and mexes built, get second factory now
            if iCurLandFactories < 2 then
                ACUActionBuildFactory(aiBrain, oACU)
            else
                local iMexInLandZone = 0
                if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) == false then iMexInLandZone = table.getn(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZMexLocations]) end
                if aiBrain[M28Economy.refiGrossMassBaseIncome] < iMexInLandZone * 0.2 then
                    ACUActionBuildMex(aiBrain, oACU)
                else
                    --Finish the initial BO
                    oACU[refbDoingInitialBuildOrder] = false
                end
            end
        end
    else
        if bDebugMessages == true then LOG(sFunctionRef..': Are building so wont give any new orders') end
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetUpgradePathForACU(oACU)
    --Records the order of upgrades we will want for the ACU
    local sFunctionRef = 'GetUpgradePathForACU'
    local bDebugMessages = true if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    if EntityCategoryContains(categories.UEF, oACU.UnitId) then
        oACU[reftPreferredUpgrades] = {'HeavyAntiMatterCannon', 'DamageStabilization', 'Shield'}
    elseif EntityCategoryContains(categories.AEON, oACU.UnitId) then
        oACU[reftPreferredUpgrades] = {'CrysalisBeam', 'HeatSink', 'Shield'}
    elseif EntityCategoryContains(categories.CYBRAN, oACU.UnitId) then
        oACU[reftPreferredUpgrades] = {'CoolingUpgrade', 'StealthGenerator'}
    elseif EntityCategoryContains(categories.SERAPHIM, oACU.UnitId) then
        oACU[reftPreferredUpgrades] = {'RateOfFire', 'AdvancedEngineering'}
    end

    --Check all of these are options (in case a mod has changed them)
    if M28Utilities.IsTableEmpty(oACU[reftPreferredUpgrades]) == false then
        local oBP = oACU:GetBlueprint()
        for iUpgradeWanted, sUpgradeWanted in oACU[reftPreferredUpgrades] do
            if M28Utilities.IsTableEmpty(oBP.Enhancements[sUpgradeWanted]) then
                oACU[reftPreferredUpgrades] = {}
                break
            end
        end
    end
    if M28Utilities.IsTableEmpty(oACU[reftPreferredUpgrades]) then
        --Find the cheapest upgrade that boosts either rate of fire or range
        oACU[reftPreferredUpgrades] = {}
        local iLowestMassCost = 1000000
        local sLowestUpgrade
        for sUpgrade, tUpgrade in oACU:GetBlueprint().Enhancements do
            if bDebugMessages == true then LOG(sFunctionRef..': Considering sUpgrade='..sUpgrade..'; tUpgrade='..reprs(tUpgrade)) end
            if tUpgrade.NewMaxRadius or tUpgrade.NewRateOfFire then
                if tUpgrade.BuildCostMass < iLowestMassCost and not(tUpgrade.Prerequisite) then
                    sLowestUpgrade = sUpgrade
                    iLowestMassCost = tUpgrade.BuildCostMass
                    if bDebugMessages == true then LOG(sFunctionRef..': Have a new preferred upgrade '..sUpgrade..'; iLowestMassCost='..iLowestMassCost) end
                end
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Finished considering the cheapest gun improving upgrade, sLowestUpgrade='..(sLowestUpgrade or 'nil')) end
        if sLowestUpgrade then oACU[reftPreferredUpgrades] = {sLowestUpgrade} end
    end

    --Remove any upgrades that we already have
    if M28Utilities.IsTableEmpty(oACU[reftPreferredUpgrades]) == false then
        local iRevisedIndex = 1
        local iTableSize = table.getn(oACU[reftPreferredUpgrades])

        for iOrigIndex=1, iTableSize do
            if oACU[reftPreferredUpgrades][iOrigIndex] then
                if not(oACU:HasEnhancement(oACU[reftPreferredUpgrades][iOrigIndex])) then --I.e. this should run the logic to decide whether we want to keep this entry of the table or remove it
                    --We want to keep the entry; Move the original index to be the revised index number (so if e.g. a table of 1,2,3 removed 2, then this would've resulted in the revised index being 2 (i.e. it starts at 1, then icnreases by 1 for the first valid entry); this then means we change the table index for orig index 3 to be 2
                    if (iOrigIndex ~= iRevisedIndex) then
                        oACU[reftPreferredUpgrades][iRevisedIndex] = oACU[reftPreferredUpgrades][iOrigIndex];
                        oACU[reftPreferredUpgrades][iOrigIndex] = nil;
                    end
                    iRevisedIndex = iRevisedIndex + 1; --i.e. this will be the position of where the next value that we keep will be located
                else
                    oACU[reftPreferredUpgrades][iOrigIndex] = nil;
                end
            end
        end
    end
end

function GetACUUpgradeWanted(oACU)
    --Returns nil if cantr find anything
    local bDebugMessages = true if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetACUUpgradeWanted'
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local sUpgradeWanted

    --If we were to get an upgrade, what upgrade would it be?
    if not(oACU[reftPreferredUpgrades]) then
        GetUpgradePathForACU(oACU)
    end
    local iTeam = oACU:GetAIBrain().M28Team
    if M28Utilities.IsTableEmpty(oACU[reftPreferredUpgrades]) == false and not(M28Conditions.HaveLowPower(iTeam)) then

        local sPotentialUpgrade = oACU[reftPreferredUpgrades][1]
        if sPotentialUpgrade then
            local tEnhancement = oACU:GetBlueprint().Enhancements[sPotentialUpgrade]
            --Do we have the eco to support the upgrade?
            if bDebugMessages == true then LOG(sFunctionRef..': Considering sPotentialUpgrade='..sPotentialUpgrade..'; for ACU '..oACU.UnitId..M28UnitInfo.GetUnitLifetimeCount(oACU)..' for brain '..oACU:GetAIBrain().Nickname..'; tEnhancement='..reprs(tEnhancement)) end
            local iBuildRate = oACU:GetBlueprint().Economy.BuildRate
            local iMassCostPerTick = 0.1 * tEnhancement.BuildCostMass / (tEnhancement.BuildTime / iBuildRate)
            local iEnergyCostPerTick = 0.1 * tEnhancement.BuildCostEnergy / (tEnhancement.BuildTime / iBuildRate)
            --Do we have enough gross energy?
            local iActiveACUUpgrades = 0
            if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingACUs]) == false then iActiveACUUpgrades = table.getn(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingACUs]) end
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if we have enough resources to get this upgrade, M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]..'; Gross mass='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass]..'; Net energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy]..'; Net mass='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass]..'; Other active upgrades='..iActiveACUUpgrades..'; Is safe to get upgrade='..tostring(M28Conditions.SafeToUpgradeUnit(oACU))..'; iEnergyCostPerTick='..iEnergyCostPerTick..'; iMassCostPerTick='..iMassCostPerTick) end
            if M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 45 * iActiveACUUpgrades + iEnergyCostPerTick * 1.35 then
                --Do we have enough gross mass?
                if M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 2.5 * iActiveACUUpgrades * iMassCostPerTick * 2 then
                    --Do we have enough net energy?
                    if (M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 100 * iActiveACUUpgrades + iEnergyCostPerTick * 2 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 5) or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= iEnergyCostPerTick * 0.4 then
                        --Do we have enoguh net mass?
                        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 3.5 * iActiveACUUpgrades * iMassCostPerTick * 3 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] >= iMassCostPerTick * 0.4 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= tEnhancement.BuildCostMass * 0.5 then
                            sUpgradeWanted = sPotentialUpgrade
                        end
                    end
                end
            end
        end
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
    return sUpgradeWanted
end

function GetACUOrder(aiBrain, oACU)
    --Early game - do we want to build factory/power?
    local sFunctionRef = 'GetACUOrder'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    if bDebugMessages == true then LOG(sFunctionRef..': oACU[refbDoingInitialBuildOrder]='..tostring(oACU[refbDoingInitialBuildOrder])) end

    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oACU:GetPosition(), true, oACU)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][aiBrain.M28Team]

    --Are there enemies in the same LZ as the ACU? If so then consider action for these
    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefLZTEnemyUnits]) == false then
        AttackOrRunFromNearbyEnemies(tLZData, tLZTeamData, oACU)
        M28Utilities.ErrorHandler('To add code for ACU enemies')
    else
        if oACU[refbDoingInitialBuildOrder] then
            GetACUEarlyGameOrders(aiBrain, oACU)

            --Have we finished our initial build order? (even if we stil lahve some early game orders)
            if bDebugMessages == true then LOG(sFunctionRef..': Checking if have finished initial build order, Economy stored mass='..aiBrain:GetEconomyStored('MASS')..'; Gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Gross energy income='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]) end
            if not(oACU:IsUnitState('Building')) and aiBrain:GetEconomyStored('MASS') == 0 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 0.3 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 15 then
                bDoingInitialBuildOrder = false
            end
        else
            --Is ACU already upgrading or has special micro active? If so then leave it be (long term will want to abort upgrade if it might die
            if oACU:IsUnitState('Upgrading') then
            elseif oACU[M28UnitInfo.refbSpecialMicroActive] then
            else


                --Do we want to get an upgrade?
                local sUpgradeToGet = GetACUUpgradeWanted(oACU)
                if sUpgradeToGet then
                    --Are we safe to get the upgrade here? if not then retreat
                    if M28Conditions.SafeToUpgradeUnit(oACU) then
                        M28Orders.IssueTrackedEnhancement(oACU, sUpgradeToGet, false, 'ACUUp')
                    else
                        --Retreat
                        local tRallyPoint = M28Land.GetNearestRallyPoint(tLZData, 1, 27, 20, 3)
                        M28Orders.IssueTrackedMove(oACU, tRallyPoint, 5, false, 'R4U')
                    end
                else
                    --We dont want an upgrade, and have no enemies in this LZ, but there might be enemies nearby (e.g. in an adjacent land zone); there might also be mexes to build or reclaim to get in this LZ - decide on what we want to do


                    --Placeholder - assist nearest factory
                    if bDebugMessages == true then LOG(sFunctionRef..': ACU no longer doing iniitial BO; Will give backup assist factory order if not building or guarding, ACU unit state='..M28UnitInfo.GetUnitState(oACU)) end
                    if not(oACU:IsUnitState('Building')) and not(oACU:IsUnitState('Guarding')) then
                        local oNearestFactory = M28Utilities.GetNearestUnit(aiBrain:GetListOfUnits(M28UnitInfo.refCategoryFactory, false, true), oACU:GetPosition(), true, M28Map.refPathingTypeAmphibious)
                        if M28UnitInfo.IsUnitValid(oNearestFactory) then
                            M28Orders.IssueTrackedGuard(oACU, oNearestFactory, false)
                        end
                    end
                end
            end
        end
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function ManageACU(aiBrain)
    local sFunctionRef = 'ManageACU'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    --First get our ACU
    local oACU
    while not(oACU) do
        local tOurACU = aiBrain:GetListOfUnits(categories.COMMAND, false, true)
        if M28Utilities.IsTableEmpty(tOurACU) == false then
            for _, oUnit in tOurACU do
                oACU = oUnit
                break
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Looking for ACU that we own, is oACU valid='..tostring(M28UnitInfo.IsUnitValid(oACU))) end
        if oACU then
            oACU[refbDoingInitialBuildOrder] = true
            break
        end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        WaitTicks(1)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    end

    --Wait until ok for us to give orders
    while (GetGameTimeSeconds() <= 4.5) do
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        WaitTicks(1)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    end

    --Make sure ACU is recorded
    M28Team.AssignUnitToLandZoneOrPond(aiBrain, oACU)

    while M28UnitInfo.IsUnitValid(oACU) do
        GetACUOrder(aiBrain, oACU)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        WaitSeconds(1)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    end
end